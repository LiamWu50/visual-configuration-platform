{"version":3,"file":"index-827330b7.js","sources":["../../../src/helper/cesium-scene-helper/index.ts","../../../src/views/design-space/map/index.tsx"],"sourcesContent":["import * as Cesium from 'cesium'\n\n/**\n * Cesium场景加载工具\n */\nexport default new (class CesiumSceneHelper {\n  get initViewer() {\n    return this._initViewer\n  }\n\n  /**\n   * 初始化地球\n   * @param {String || HTMLDivElement} target\n   * @return {CesiumSdk.MapViewer} mapViewer\n   */\n  private _initViewer(target: string | HTMLDivElement) {\n    Cesium.Ion.defaultAccessToken =\n      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIyNjBjYTQwMy05NjRhLTRiZmQtOWU2ZC02YTIzMTZjY2UyYzYiLCJpZCI6MTk2NjAsInNjb3BlcyI6WyJhc3IiLCJnYyJdLCJpYXQiOjE1NzU5NjI3Mjh9.3-9slXLcFxuR4iDzyigEGKkCfTEiUvC06DSJ3Q2xEP0'\n\n    const options = this.getInitOptions()\n    const viewer = new Cesium.Viewer(target, options)\n    const creditContainer = viewer.cesiumWidget.creditContainer as HTMLElement\n    creditContainer.style.display = 'none' //隐藏版本信息\n\n    viewer.scene.globe.baseColor = new Cesium.Color(0, 0, 0, 0)\n    //cesiumViewer.scene.debugShowFramesPerSecond = true; //显示帧率,帧率与显示流畅度有关，或说与显卡有关\n    viewer.scene.skyBox.show = false //是否显示星空\n    viewer.scene.sun.show = false //是否显示太阳\n    viewer.scene.moon.show = false //是否显示有月亮\n    viewer.scene.skyAtmosphere.show = false //是否隐藏大气圈\n    viewer.scene.globe.show = true //是否显示地球\n    viewer.scene.globe.depthTestAgainstTerrain = true //是否开启深度检测\n    viewer.scene.postProcessStages.fxaa.enabled = true\n    const cesiumWidget = viewer.cesiumWidget as any\n    cesiumWidget.supportsImageRenderingPixelated = (\n      Cesium.FeatureDetection as any\n    ).supportsImageRenderingPixelated()\n    cesiumWidget.forceResize = true\n    viewer.scene.backgroundColor = new Cesium.Color(0.0, 0.0, 0.0, 0.0)\n    viewer.scene.debugShowFramesPerSecond = true\n\n    if ((Cesium.FeatureDetection as any).supportsImageRenderingPixelated()) {\n      let vtxfDpr = window.devicePixelRatio\n      // 适度降低分辨率\n      while (vtxfDpr >= 2.0) {\n        vtxfDpr /= 2.0\n      }\n      viewer.resolutionScale = vtxfDpr\n    }\n\n    return viewer\n  }\n\n  /**\n   * 获取地球初始化参数\n   * @returns {Object}\n   */\n  private getInitOptions() {\n    return {\n      imageryProvider: new Cesium.MapboxImageryProvider({\n        mapId: 'mapbox.satellite',\n        accessToken:\n          'pk.eyJ1IjoibGlhbS13dSIsImEiOiJjbGd2eXFldXowNm1jM2txcDZremhpcHFyIn0.Ae9INWez6cZRKQoZKf5K1Q'\n      }),\n      geocoder: false,\n      homeButton: false,\n      sceneModePicker: false,\n      baseLayerPicker: false,\n      navigationHelpButton: false,\n      animation: false,\n      timeline: false,\n      fullscreenButton: false,\n      shadows: true,\n      infoBox: false,\n      CreditsDisplay: false,\n      shouldAnimate: true,\n      selectionIndicator: false,\n      orderIndependentTranslucency: false,\n      contextOptions: {\n        webgl: {\n          alpha: true\n        }\n      }\n    }\n  }\n})()\n","import * as Cesium from 'cesium'\n\nimport CesiumSceneHelper from '@/helper/cesium-scene-helper'\n\nimport styles from './index.module.scss'\nimport ResourceTree from './resource-tree'\nimport { viewerKey } from './types'\n\nexport default defineComponent({\n  name: 'CesiumMap',\n  setup() {\n    const loaded = ref(false)\n    const mapViewer = ref<Cesium.Viewer | null>(null)\n    provide(viewerKey, mapViewer)\n\n    onMounted(() => {\n      mapViewer.value = CesiumSceneHelper.initViewer('mapContainer')\n      loaded.value = true\n    })\n\n    return () => (\n      <div class={styles.map}>\n        {loaded.value ? <ResourceTree /> : null}\n        <div id='mapContainer' class={styles.container}></div>\n      </div>\n    )\n  }\n})\n"],"names":["CesiumSceneHelper","initViewer","this","_initViewer","target","Cesium","Ion","defaultAccessToken","options","getInitOptions","viewer","Viewer","cesiumWidget","creditContainer","style","display","scene","globe","baseColor","Color","skyBox","show","sun","moon","skyAtmosphere","depthTestAgainstTerrain","postProcessStages","fxaa","enabled","supportsImageRenderingPixelated","FeatureDetection","forceResize","backgroundColor","debugShowFramesPerSecond","vtxfDpr","window","devicePixelRatio","resolutionScale","imageryProvider","MapboxImageryProvider","mapId","accessToken","geocoder","homeButton","sceneModePicker","baseLayerPicker","navigationHelpButton","animation","timeline","fullscreenButton","shadows","infoBox","CreditsDisplay","shouldAnimate","selectionIndicator","orderIndependentTranslucency","contextOptions","webgl","alpha","Map","defineComponent","name","setup","loaded","ref","mapViewer","provide","onMounted","_createVNode","class","styles","id"],"mappings":"kgCAKA,MAAAA,EAAA,IAAA,MAA4C,cAAAC,GAExC,OAAAC,KAAAC,WAAY,CACd,WAAAA,CAAAC,GAQEC,OAAAC,IAAAC,mBAAA,oNAGA,MAAAC,EAAAN,KAAAO,iBACAC,EAAA,IAAAL,OAAAM,OAAAP,EAAAI,GACAE,EAAAE,aAAAC,gBACAC,MAAAC,QAAA,OAEAL,EAAAM,MAAAC,MAAAC,UAAA,IAAAb,OAAAc,MAAA,EAAA,EAAA,EAAA,GAEAT,EAAAM,MAAAI,OAAAC,MAAA,EACAX,EAAAM,MAAAM,IAAAD,MAAA,EACAX,EAAAM,MAAAO,KAAAF,MAAA,EACAX,EAAAM,MAAAQ,cAAAH,MAAA,EACAX,EAAAM,MAAAC,MAAAI,MAAA,EACAX,EAAAM,MAAAC,MAAAQ,yBAAA,EACAf,EAAAM,MAAAU,kBAAAC,KAAAC,SAAA,EACA,MAAAhB,EAAAF,EAAAE,aAQA,GAPAA,EAAAiB,gCAAAxB,OAAAyB,iBAAAD,kCAGAjB,EAAAmB,aAAA,EACArB,EAAAM,MAAAgB,gBAAA,IAAA3B,OAAAc,MAAA,EAAA,EAAA,EAAA,GACAT,EAAAM,MAAAiB,0BAAA,EAEA5B,OAAAyB,iBAAAD,kCAAA,CACE,IAAAK,EAAAC,OAAAC,iBAEA,KAAAF,GAAA,GACEA,GAAA,EAEFxB,EAAA2B,gBAAAH,CAAyB,CAG3B,OAAAxB,CAAO,CACT,cAAAD,GAOE,MAAA,CAAO6B,gBAAA,IAAAjC,OAAAkC,sBAAA,CAC6CC,MAAA,mBACzCC,YAAA,8FAGRC,UAAA,EACSC,YAAA,EACEC,iBAAA,EACKC,iBAAA,EACAC,sBAAA,EACKC,WAAA,EACXC,UAAA,EACDC,kBAAA,EACQC,SAAA,EACTC,SAAA,EACAC,gBAAA,EACOC,eAAA,EACDC,oBAAA,EACKC,8BAAA,EACUC,eAAA,CACdC,MAAA,CACPC,OAAA,IAIX,6CC3EJC,EAAAC,EAAA,CACEC,KAAAA,YACAC,KAAAA,GACE,MAAAC,EAAAC,GAAA,GACAC,EAAAD,EAAA,MAQA,OAPAE,EAAAA,EAAAA,GAEAC,GAAAA,wDAKA,IAAAC,EAAA,MAAA,CAAOC,MAAAC,yCAEoCC,GAAA,eAAAF,MAAAC,UAI7C"}