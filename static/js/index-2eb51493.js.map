{"version":3,"file":"index-2eb51493.js","sources":["../../../src/helper/cesium-source-loader/feature-layer-manager.ts","../../../src/helper/cesium-source-loader/gltf-model-manager.ts","../../../src/helper/cesium-source-loader/imagery-provider.ts","../../../src/helper/cesium-source-loader/imagery-layer-manager.ts","../../../src/helper/cesium-source-loader/special-layer-manager.ts","../../../src/helper/cesium-source-loader/terrain-manager.ts","../../../src/helper/cesium-source-loader/tileset-layer-manager.ts","../../../src/helper/cesium-source-loader/index.ts"],"sourcesContent":["import * as Cesium from 'cesium'\n\nimport { MapSourceType } from '@/common/map-base'\n\nexport default class FeatureLayerManager {\n  private viewer: Cesium.Viewer\n  private dataSource: Map<string, Cesium.GeoJsonDataSource>\n  private options: Map<string, any>\n\n  constructor(viewer: Cesium.Viewer) {\n    this.viewer = viewer\n    this.dataSource = new Map() // 存储地图数据实例\n    this.options = new Map() // 存储地图数据配置项\n  }\n\n  /**\n   * 加载矢量数据\n   * @param options Object\n   */\n  public async add(options: any) {\n    const style = options.feature\n\n    const layer = await Cesium.GeoJsonDataSource.load(options.url, {\n      stroke: style.stroke || Cesium.Color.HOTPINK,\n      strokeWidth: style.strokeWidth || 3,\n      fill:\n        Cesium.Color.fromCssColorString(style.fill).withAlpha(0.6) ||\n        Cesium.Color.PINK.withAlpha(0.6),\n      markerColor:\n        Cesium.Color.fromCssColorString(style.markerColor) || Cesium.Color.PINK,\n      clampToGround: style.clampToGround || true\n    })\n    this.viewer.dataSources.add(layer)\n    this.dataSource.set(options.id, layer)\n    this.options.set(options.id, options)\n    this.viewer.flyTo(layer)\n  }\n\n  /**\n   * 通过ID获取矢量要素\n   * @param id String\n   * @returns Cesium.GeoJsonDataSource\n   */\n  public getLayerById(id: string) {\n    return this.dataSource.get(id)\n  }\n\n  /**\n   * 删除矢量数据\n   * @param id string\n   */\n  public delete(id: string) {\n    const layer = this.getLayerById(id)\n    if (!layer) return\n    this.viewer.dataSources.remove(layer as Cesium.GeoJsonDataSource)\n    this.options.delete(id)\n  }\n\n  /**\n   * 设置矢量数据的可见性\n   * @param id String\n   * @param visible Boolean\n   */\n  public setVisibleById(id: string, visible: boolean) {\n    const layer = this.getLayerById(id)\n    if (layer) layer.show = visible\n  }\n\n  /**\n   * 飞行到矢量图层\n   * @param id string\n   */\n  public flyTo(id: string) {\n    const layer = this.getLayerById(id)\n    if (layer) this.viewer.flyTo(layer)\n  }\n\n  /**\n   * 获取加载的资源\n   */\n  public getLoadedSource() {\n    return {\n      type: MapSourceType.FEATURE,\n      value: Object.fromEntries(this.options)\n    }\n  }\n}\n","import * as Cesium from 'cesium'\n\nimport { MapSourceType } from '@/common/map-base'\n\nexport default class GltfModelManager {\n  private viewer: Cesium.Viewer\n  private dataSource: Map<string, Cesium.Model>\n  private options: Map<string, any>\n\n  constructor(viewer: Cesium.Viewer) {\n    this.viewer = viewer\n    this.dataSource = new Map()\n    this.options = new Map()\n  }\n\n  /**\n   * 加载gltf模型\n   * @param options Object\n   */\n  public async add(options: any) {\n    try {\n      const { longitude, latitude, altitude } = options.position\n      const modelMatrix = Cesium.Transforms.eastNorthUpToFixedFrame(\n        Cesium.Cartesian3.fromDegrees(longitude, latitude, altitude)\n      )\n      const model = await Cesium.Model.fromGltfAsync({\n        url: options.url,\n        modelMatrix: modelMatrix,\n        scale: options.scale || 100,\n        heightReference: options.heightReference\n      })\n\n      this.viewer.scene.primitives.add(model)\n      this.dataSource.set(options.id, model)\n      this.options.set(options.id, options)\n      model.readyEvent.addEventListener(() => this.flyTo(options.id))\n    } catch (error) {\n      console.log(`Failed to load model. ${error}`)\n    }\n  }\n\n  /**\n   * 通过ID获取模型\n   * @param id String\n   * @returns Cesium.Model\n   */\n  public getModelById(id: string) {\n    return this.dataSource.get(id)\n  }\n\n  /**\n   * 删除gltf模型\n   * @param id string\n   */\n  public delete(id: string) {\n    const model = this.getModelById(id)\n    if (!model) return\n    this.viewer.scene.primitives.remove(model as Cesium.Model)\n    this.options.delete(id)\n  }\n\n  /**\n   * 设置gltf模型的可见性\n   * @param id String\n   * @param visible Boolean\n   */\n  public setVisibleById(id: string, visible: boolean) {\n    const model = this.getModelById(id)\n    if (model) model.show = visible\n  }\n\n  /**\n   * 飞行到gltf模型\n   * @param id string\n   */\n  public flyTo(id: string) {\n    const model = this.getModelById(id)\n    console.log('getModelById', model)\n    if (!model) return\n    const boundingSphere = model.boundingSphere\n    this.viewer.camera.flyToBoundingSphere(boundingSphere)\n  }\n\n  /**\n   * 获取加载的资源\n   */\n  public getLoadedSource() {\n    return {\n      type: MapSourceType.GLTF_MODEL,\n      value: Object.fromEntries(this.options)\n    }\n  }\n}\n","import * as Cesium from 'cesium'\n\nimport { MapboxAccessToken } from '@/common/map-base'\n\nfunction ArcGisMapServerImageryProvider(url: string) {\n  return Cesium.ArcGisMapServerImageryProvider.fromUrl(url, {\n    enablePickFeatures: false\n  })\n}\n\nfunction BingMapsImageryProvider(url: string, options: any) {\n  return Cesium.BingMapsImageryProvider.fromUrl(url, {\n    key: options.key,\n    mapStyle: Cesium.BingMapsStyle.AERIAL\n  })\n}\n\nfunction TileMapServiceImageryProvider(url: string) {\n  return Cesium.TileMapServiceImageryProvider.fromUrl(url, {})\n}\n\n/**\n * mapbox服务\n */\nfunction MapboxImageryProvider(url: string, options: any) {\n  const mapId = Cesium.defaultValue(options.mapId, 'mapbox.satellite')\n  return new Cesium.MapboxImageryProvider({\n    mapId,\n    accessToken: MapboxAccessToken\n  })\n}\n\nfunction SingleTileImageryProvider(url: string, options: any) {\n  options.rectangle = Cesium.defaultValue(\n    options.rectangle,\n    Cesium.Rectangle.fromDegrees(-180.0, -90.0, 180.0, 90.0)\n  )\n  return Cesium.SingleTileImageryProvider.fromUrl(url, {\n    rectangle: options.rectangle\n  })\n}\n\nfunction UrlTemplateImageryProvider(url: string) {\n  return new Cesium.UrlTemplateImageryProvider({\n    url\n  })\n}\n\n/**\n * wms服务\n */\nfunction WebMapServiceImageryProvider(url: string, options: any) {\n  return new Cesium.WebMapServiceImageryProvider({\n    url,\n    layers: options.laers,\n    parameters: options.parameters\n  })\n}\n\n/**\n * wmts服务按照参数进行加载\n */\nfunction WebMapTileServiceImageryProvider(url: string, options: any) {\n  return new Cesium.WebMapTileServiceImageryProvider({\n    url,\n    layer: options.layer,\n    style: options.style,\n    tileMatrixSetID: options.tileMatrixSetID,\n    format: options.format,\n    maximumLevel: options.maximumLevel\n  })\n}\n\nexport default {\n  arcGisMapServer: ArcGisMapServerImageryProvider,\n  bingMap: BingMapsImageryProvider,\n  tileMapServer: TileMapServiceImageryProvider,\n  mapBox: MapboxImageryProvider,\n  singleTile: SingleTileImageryProvider,\n  urlTemplate: UrlTemplateImageryProvider,\n  webMapService: WebMapServiceImageryProvider,\n  webMapTileService: WebMapTileServiceImageryProvider\n}\n","import * as Cesium from 'cesium'\n\nimport { ImagerProviderType } from '@/common/map-base'\nimport { MapSourceType } from '@/common/map-base'\n\nimport ImageryProvider from './imagery-provider'\n\nexport default class ImageryLayerManager {\n  private viewer: Cesium.Viewer\n  private dataSource: Map<string, Cesium.ImageryLayer>\n  private options: Map<string, any>\n\n  constructor(viewer: Cesium.Viewer) {\n    this.viewer = viewer\n    this.dataSource = new Map() // 存储地图数据实例\n    this.options = new Map() // 存储地图数据配置项\n  }\n\n  /**\n   * 加载影像服务\n   * @param options Object\n   */\n  public async add(options: any) {\n    const type: keyof typeof ImagerProviderType = options.imageryType\n    const typeHandler = ImageryProvider[type]\n    const imageryProvider = await typeHandler(options.url, options)\n    const layer = new Cesium.ImageryLayer(imageryProvider, {})\n\n    this.viewer.imageryLayers.add(layer)\n    this.dataSource.set(options.id, layer)\n    this.options.set(options.id, options)\n    this.viewer.flyTo(layer)\n  }\n\n  /**\n   * 通过ID获取影像图层\n   * @param id String\n   * @returns Cesium.ImageryLayer\n   */\n  public getLayerById(id: string) {\n    return this.dataSource.get(id)\n  }\n\n  /**\n   * 删除影像服务\n   * @param id string\n   */\n  public delete(id: string) {\n    const layer = this.getLayerById(id)\n    if (!layer) return\n    this.viewer.imageryLayers.remove(layer as Cesium.ImageryLayer)\n    this.options.delete(id)\n    window.$message.success('影像服务删除成功！')\n  }\n\n  /**\n   * 设置影像服务的可见性\n   * @param id String\n   * @param visible Boolean\n   */\n  public setVisibleById(id: string, visible: boolean) {\n    const layer = this.getLayerById(id)\n    if (layer) layer.show = visible\n  }\n\n  /**\n   * 飞行到影像图层\n   * @param id string\n   */\n  public flyTo(id: string) {\n    const layer = this.getLayerById(id)\n    if (layer) this.viewer.flyTo(layer)\n  }\n\n  /**\n   * 获取加载的资源\n   */\n  public getLoadedSource() {\n    return {\n      type: MapSourceType.IMAGE_SERVICE,\n      value: Object.fromEntries(this.options)\n    }\n  }\n}\n","import axios from 'axios'\nimport * as Cesium from 'cesium'\n\nimport { MapSourceType } from '@/common/map-base'\nimport utils from '@/utils'\n\nexport default class SpecialLayerManager {\n  private viewer: Cesium.Viewer\n  private dataSource: Map<string, Cesium.BillboardCollection>\n  private options: Map<string, any>\n\n  constructor(viewer: Cesium.Viewer) {\n    this.viewer = viewer\n    this.dataSource = new Map() // 存储地图数据实例\n    this.options = new Map() // 存储地图数据配置项\n  }\n\n  /**\n   * 加载专题数据\n   * @param options Object\n   */\n  public async add(options: any) {\n    const features = await this.getFeatures(options.url)\n    const collection = this.createCollectioon(features, options)\n\n    this.viewer.scene.primitives.add(collection)\n    this.dataSource.set(options.id, collection)\n    this.options.set(options.id, options)\n    this.flyTo(options.id)\n  }\n\n  /**\n   * 获取专题数据的features\n   * @param url String\n   */\n  public async getFeatures(url: string) {\n    try {\n      const res = await axios.get(url)\n      return res?.data?.features || []\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  public createCollectioon(features: any[], options: any) {\n    const billboards = new Cesium.BillboardCollection({\n      scene: this.viewer.scene\n    })\n\n    features.forEach(async (f) => {\n      const coordinate: [number, number] = f.geometry.coordinates\n      const image = await utils.imageOverlayText(\n        options.special.icon,\n        f.properties[options.special.label]\n      )\n\n      billboards.add({\n        position: Cesium.Cartesian3.fromDegrees(...coordinate),\n        image,\n        scale: 0.6,\n        width: options.special.size,\n        disableDepthTestDistance: Number.POSITIVE_INFINITY,\n        heightReference: Cesium.HeightReference.RELATIVE_TO_GROUND\n      })\n    })\n\n    return billboards\n  }\n\n  /**\n   * 通过ID获取矢量要素集合\n   * @param id String\n   * @returns Cesium.BillboardCollection\n   */\n  public getLayerById(id: string) {\n    return this.dataSource.get(id)\n  }\n\n  /**\n   * 删除矢量要素集合\n   * @param id string\n   */\n  public delete(id: string) {\n    const layer = this.getLayerById(id)\n    if (!layer) return\n    this.viewer.scene.primitives.remove(layer)\n    this.options.delete(id)\n  }\n\n  /**\n   * 设置矢量数据的可见性\n   * @param id String\n   * @param visible Boolean\n   */\n  public setVisibleById(id: string, visible: boolean) {\n    const layer = this.getLayerById(id)\n    if (layer) layer.show = visible\n  }\n\n  /**\n   * 飞行到矢量要素集合\n   * @param id string\n   */\n  public flyTo(id: string) {\n    const layer = this.getLayerById(id) as any\n    if (!layer) return\n    const billboards = layer._billboards as Cesium.Billboard[]\n    const cartesians = billboards.map((b) => b.position)\n    const rectangle = Cesium.Rectangle.fromCartesianArray(cartesians)\n    this.viewer.camera.flyTo({\n      destination: rectangle\n    })\n  }\n\n  /**\n   * 获取加载的矢量要素集合\n   */\n  public getLoadedSource() {\n    return {\n      type: MapSourceType.SPECIAL_SUBJECT,\n      value: Object.fromEntries(this.options)\n    }\n  }\n}\n","import * as Cesium from 'cesium'\n\nimport { TerrainType } from '@/common/map-base'\nimport { MapSourceType } from '@/common/map-base'\n\ninterface WorldTerrainOptions {\n  requestVertexNormals?: boolean\n  requestWaterMask?: boolean\n}\n\ntype TerrainProvider =\n  | Cesium.EllipsoidTerrainProvider\n  | Cesium.CesiumTerrainProvider\n\n/**\n * 无地形\n */\nfunction ellipsoidTerrainProvider(): Cesium.EllipsoidTerrainProvider {\n  return new Cesium.EllipsoidTerrainProvider()\n}\n\n/**\n * 创建自定义地形\n */\nasync function cesiumTerrainProvider(\n  url: string,\n  options: any\n): Promise<Cesium.CesiumTerrainProvider> {\n  return await Cesium.CesiumTerrainProvider.fromUrl(url, {\n    requestVertexNormals: options.requestVertexNormals\n  })\n}\n\n/**\n * 创建Cesium自带地形\n */\nasync function worldTerrain(\n  options?: WorldTerrainOptions\n): Promise<Cesium.CesiumTerrainProvider> {\n  return await Cesium.createWorldTerrainAsync({\n    requestVertexNormals: options?.requestVertexNormals,\n    requestWaterMask: options?.requestWaterMask\n  })\n}\n\n/**\n * 地形加载工具\n */\nexport default class TerrainManager {\n  private viewer: Cesium.Viewer\n  private terrainProvider: TerrainProvider\n  private visible: boolean\n  private options: Map<string, any>\n\n  constructor(viewer: Cesium.Viewer) {\n    this.viewer = viewer\n    this.terrainProvider = ellipsoidTerrainProvider()\n    this.visible = false\n    this.options = new Map()\n  }\n\n  /**\n   * 加载地形数据\n   * @param {Object} options\n   */\n  public async add(options: any = {}) {\n    const type = Cesium.defaultValue(\n      options.terrainType,\n      TerrainType.ellipsoidTerrain\n    )\n\n    if (type === TerrainType.ellipsoidTerrain) {\n      this.terrainProvider = ellipsoidTerrainProvider()\n    } else if (type === TerrainType.cesiumTerrain) {\n      this.terrainProvider = await cesiumTerrainProvider(options.url, options)\n    } else if (type === TerrainType.worldTerrain) {\n      this.terrainProvider = await worldTerrain(options)\n    }\n\n    this.viewer.terrainProvider = this.terrainProvider\n    this.options.set(options.id, options)\n  }\n\n  /**\n   *  切换地形隐藏与显示\n   * @param {Boolean} value\n   */\n  public show(value: boolean) {\n    if (value !== this.visible) {\n      const emptyTerrain = new Cesium.EllipsoidTerrainProvider()\n      this.viewer.terrainProvider = value ? this.terrainProvider : emptyTerrain\n      this.visible = value\n    }\n  }\n\n  /**\n   * 删除地形服务\n   */\n  public delete() {\n    const emptyTerrain = new Cesium.EllipsoidTerrainProvider()\n    this.viewer.terrainProvider = emptyTerrain\n  }\n\n  /**\n   * 飞行到地形\n   */\n  public flyTo() {\n    return\n  }\n\n  /**\n   * 获取加载的地形数据\n   */\n  public getLoadedSource() {\n    return {\n      type: MapSourceType.TERRAIN_SERVICE,\n      value: Object.fromEntries(this.options)\n    }\n  }\n}\n","import * as Cesium from 'cesium'\n\nimport { MapSourceType } from '@/common/map-base'\n\nexport default class TilesetLayerManager {\n  private viewer: Cesium.Viewer\n  private dataSource: Map<string, Cesium.Cesium3DTileset>\n  private options: Map<string, any>\n\n  constructor(viewer: Cesium.Viewer) {\n    this.viewer = viewer\n    this.dataSource = new Map()\n    this.options = new Map()\n  }\n\n  /**\n   * 加载3dtiles模型\n   * @param options Object\n   */\n  public async add(options: any) {\n    const tileset = await Cesium.Cesium3DTileset.fromUrl(options.url, {\n      cacheBytes: options.cacheBytes || 128,\n      maximumScreenSpaceError: options.maximumScreenSpaceError || 64\n    })\n    this.viewer.scene.primitives.add(tileset)\n    this.dataSource.set(options.id, tileset)\n    this.options.set(options.id, options)\n    this.viewer.flyTo(tileset)\n  }\n\n  /**\n   * 通过ID获取模型\n   * @param id String\n   * @returns Cesium.Cesium3DTileset\n   */\n  public getTilesetById(id: string) {\n    return this.dataSource.get(id)\n  }\n\n  /**\n   * 删除3dtiles模型\n   * @param id string\n   */\n  public delete(id: string) {\n    const tileset = this.getTilesetById(id)\n    if (!tileset) return\n    this.viewer.scene.primitives.remove(tileset as Cesium.Cesium3DTileset)\n    this.options.delete(id)\n  }\n\n  /**\n   * 设置3dtiles模型的可见性\n   * @param id String\n   * @param visible Boolean\n   */\n  public setVisibleById(id: string, visible: boolean) {\n    const tileset = this.getTilesetById(id)\n    if (!tileset) return\n    tileset!.show = visible\n  }\n\n  /**\n   * 飞行到3dtiles模型\n   * @param id string\n   */\n  public flyTo(id: string) {\n    const tileset = this.getTilesetById(id)\n    if (!tileset) return\n    this.viewer.flyTo(tileset)\n  }\n\n  /**\n   * 获取加载的资源\n   */\n  public getLoadedSource() {\n    return {\n      type: MapSourceType.TILE_SET,\n      value: Object.fromEntries(this.options)\n    }\n  }\n}\n","import * as Cesium from 'cesium'\n\nimport { MapSourceType, MapSourceTypeEnum } from '@/common/map-base'\n\nimport FeatureLayerManager from './feature-layer-manager'\nimport GltfModelManager from './gltf-model-manager'\nimport ImageryLayerManager from './imagery-layer-manager'\nimport SpecialLayerManager from './special-layer-manager'\nimport TerrainManager from './terrain-manager'\nimport TilesetLayerManager from './tileset-layer-manager'\n\n/**\n * Cesium相关资源加载工具\n */\nexport default class CesiumSourceLoader {\n  private imageryLayerManager: ImageryLayerManager\n  private tilesetLayerManager: TilesetLayerManager\n  private gltfModelManager: GltfModelManager\n  private terrainManager: TerrainManager\n  private featureLayerManager: FeatureLayerManager\n  private specialLayerManager: SpecialLayerManager\n\n  constructor(viewer: Cesium.Viewer) {\n    this.imageryLayerManager = new ImageryLayerManager(viewer)\n    this.tilesetLayerManager = new TilesetLayerManager(viewer)\n    this.gltfModelManager = new GltfModelManager(viewer)\n    this.terrainManager = new TerrainManager(viewer)\n    this.featureLayerManager = new FeatureLayerManager(viewer)\n    this.specialLayerManager = new SpecialLayerManager(viewer)\n  }\n\n  get typeManager() {\n    return {\n      [MapSourceType.IMAGE_SERVICE]: this.imageryLayerManager,\n      [MapSourceType.TERRAIN_SERVICE]: this.terrainManager,\n      [MapSourceType.TILE_SET]: this.tilesetLayerManager,\n      [MapSourceType.GLTF_MODEL]: this.gltfModelManager,\n      [MapSourceType.FEATURE]: this.featureLayerManager,\n      [MapSourceType.SPECIAL_SUBJECT]: this.specialLayerManager\n    }\n  }\n\n  /**\n   * 加载地图资源\n   * @param type String\n   * @param options Object\n   */\n  public addSource(type: MapSourceTypeEnum, options: any) {\n    const curManager = this.typeManager[type]\n    curManager.add(options)\n  }\n\n  /**\n   * 删除地图资源\n   * @param id String\n   * @param type String\n   */\n  public deleteSource(id: string, type: string) {\n    const curManager = this.typeManager[type as MapSourceTypeEnum]\n    curManager.delete(id)\n  }\n\n  /**\n   * 飞到地图资源\n   * @param id String\n   * @param type String\n   */\n  public flyTo(id: string, type: MapSourceTypeEnum) {\n    const curManager = this.typeManager[type]\n    curManager.flyTo(id)\n  }\n\n  /**\n   * 获取各类型的资源\n   */\n  public getTypeDataSource() {\n    const dataSource = Object.keys(this.typeManager).map((k) => {\n      const loader = this.typeManager[k as MapSourceTypeEnum]\n      return loader.getLoadedSource()\n    })\n    return dataSource\n  }\n}\n"],"names":["FeatureLayerManager","constructor","viewer","__publicField","this","dataSource","Map","options","add","style","feature","layer","Cesium","GeoJsonDataSource","load","url","stroke","Color","HOTPINK","strokeWidth","fill","fromCssColorString","withAlpha","PINK","markerColor","clampToGround","dataSources","set","id","flyTo","getLayerById","get","remove","delete","setVisibleById","visible","show","getLoadedSource","type","MapSourceType","FEATURE","value","Object","fromEntries","GltfModelManager","longitude","latitude","altitude","position","modelMatrix","Transforms","eastNorthUpToFixedFrame","Cartesian3","fromDegrees","model","Model","fromGltfAsync","scale","heightReference","scene","primitives","readyEvent","addEventListener","error","getModelById","boundingSphere","camera","flyToBoundingSphere","GLTF_MODEL","ImageryProvider","arcGisMapServer","ArcGisMapServerImageryProvider","fromUrl","enablePickFeatures","bingMap","BingMapsImageryProvider","key","mapStyle","BingMapsStyle","AERIAL","tileMapServer","TileMapServiceImageryProvider","mapBox","mapId","defaultValue","MapboxImageryProvider","accessToken","MapboxAccessToken","singleTile","rectangle","Rectangle","SingleTileImageryProvider","urlTemplate","UrlTemplateImageryProvider","webMapService","WebMapServiceImageryProvider","layers","laers","parameters","webMapTileService","WebMapTileServiceImageryProvider","tileMatrixSetID","format","maximumLevel","ImageryLayerManager","imageryType","typeHandler","imageryProvider","ImageryLayer","imageryLayers","window","$message","success","IMAGE_SERVICE","SpecialLayerManager","features","getFeatures","collection","createCollectioon","res","axios","_a","data","err","billboards","BillboardCollection","forEach","async","f","coordinate","geometry","coordinates","image","utils","imageOverlayText","special","icon","properties","label","width","size","disableDepthTestDistance","Number","POSITIVE_INFINITY","HeightReference","RELATIVE_TO_GROUND","cartesians","_billboards","map","b","fromCartesianArray","destination","SPECIAL_SUBJECT","ellipsoidTerrainProvider","EllipsoidTerrainProvider","TerrainManager","terrainProvider","terrainType","TerrainType","ellipsoidTerrain","cesiumTerrain","CesiumTerrainProvider","requestVertexNormals","cesiumTerrainProvider","worldTerrain","createWorldTerrainAsync","requestWaterMask","emptyTerrain","TERRAIN_SERVICE","TilesetLayerManager","tileset","Cesium3DTileset","cacheBytes","maximumScreenSpaceError","getTilesetById","TILE_SET","CesiumSourceLoader","imageryLayerManager","tilesetLayerManager","gltfModelManager","terrainManager","featureLayerManager","specialLayerManager","typeManager","addSource","deleteSource","getTypeDataSource","keys","k"],"mappings":"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"}