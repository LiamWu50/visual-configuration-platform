{"version":3,"file":"attrs-6a8166b6.js","sources":["../../../node_modules/naive-ui/es/switch/styles/light.js","../../../node_modules/naive-ui/es/switch/src/styles/index.cssr.js","../../../node_modules/naive-ui/es/switch/src/Switch.js","../../../src/primitives/attrs/chart-grid.tsx","../../../src/primitives/attrs/chart-xAxis.tsx","../../../src/primitives/attrs/chart-yAxis.tsx","../../../src/primitives/components/chart/bar/attrs.tsx"],"sourcesContent":["import { changeColor } from 'seemly';\nimport commonVars from './_common';\nimport { commonLight } from '../../_styles/common';\nconst self = (vars) => {\n    const { primaryColor, opacityDisabled, borderRadius, textColor3 } = vars;\n    const railOverlayColor = 'rgba(0, 0, 0, .14)';\n    return Object.assign(Object.assign({}, commonVars), { iconColor: textColor3, textColor: 'white', loadingColor: primaryColor, opacityDisabled, railColor: railOverlayColor, railColorActive: primaryColor, buttonBoxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.3), inset 0 0 1px 0 rgba(0, 0, 0, 0.05)', buttonColor: '#FFF', railBorderRadiusSmall: borderRadius, railBorderRadiusMedium: borderRadius, railBorderRadiusLarge: borderRadius, buttonBorderRadiusSmall: borderRadius, buttonBorderRadiusMedium: borderRadius, buttonBorderRadiusLarge: borderRadius, boxShadowFocus: `0 0 0 2px ${changeColor(primaryColor, { alpha: 0.2 })}` });\n};\nconst switchLight = {\n    name: 'Switch',\n    common: commonLight,\n    self\n};\nexport default switchLight;\n","import { iconSwitchTransition } from '../../../_styles/transitions/icon-switch.cssr';\nimport { c, cB, cE, cM, cNotM } from '../../../_utils/cssr';\n// vars:\n// --n-bezier\n// --n-button-border-radius\n// --n-button-box-shadow\n// --n-button-color\n// --n-button-width\n// --n-button-width-pressed\n// --n-height\n// --n-offset\n// --n-rail-border-radius\n// --n-rail-color\n// --n-rail-color-active\n// --n-rail-height\n// --n-rail-width\n// --n-width\n// --n-box-shadow-focus\n// --n-loading-color\n// --n-text-color\n// --n-icon-color\nexport default cB('switch', `\n height: var(--n-height);\n min-width: var(--n-width);\n vertical-align: middle;\n user-select: none;\n -webkit-user-select: none;\n display: inline-flex;\n outline: none;\n justify-content: center;\n align-items: center;\n`, [cE('children-placeholder', `\n height: var(--n-rail-height);\n display: flex;\n flex-direction: column;\n overflow: hidden;\n pointer-events: none;\n visibility: hidden;\n `), cE('rail-placeholder', `\n display: flex;\n flex-wrap: none;\n `), cE('button-placeholder', `\n width: calc(1.75 * var(--n-rail-height));\n height: var(--n-rail-height);\n `), cB('base-loading', `\n position: absolute;\n top: 50%;\n left: 50%;\n transform: translateX(-50%) translateY(-50%);\n font-size: calc(var(--n-button-width) - 4px);\n color: var(--n-loading-color);\n transition: color .3s var(--n-bezier);\n `, [iconSwitchTransition({\n  left: '50%',\n  top: '50%',\n  originalTransform: 'translateX(-50%) translateY(-50%)'\n})]), cE('checked, unchecked', `\n transition: color .3s var(--n-bezier);\n color: var(--n-text-color);\n box-sizing: border-box;\n position: absolute;\n white-space: nowrap;\n top: 0;\n bottom: 0;\n display: flex;\n align-items: center;\n line-height: 1;\n `), cE('checked', `\n right: 0;\n padding-right: calc(1.25 * var(--n-rail-height) - var(--n-offset));\n `), cE('unchecked', `\n left: 0;\n justify-content: flex-end;\n padding-left: calc(1.25 * var(--n-rail-height) - var(--n-offset));\n `), c('&:focus', [cE('rail', `\n box-shadow: var(--n-box-shadow-focus);\n `)]), cM('round', [cE('rail', 'border-radius: calc(var(--n-rail-height) / 2);', [cE('button', 'border-radius: calc(var(--n-button-height) / 2);')])]), cNotM('disabled', [cNotM('icon', [cM('rubber-band', [cM('pressed', [cE('rail', [cE('button', 'max-width: var(--n-button-width-pressed);')])]), cE('rail', [c('&:active', [cE('button', 'max-width: var(--n-button-width-pressed);')])]), cM('active', [cM('pressed', [cE('rail', [cE('button', 'left: calc(100% - var(--n-offset) - var(--n-button-width-pressed));')])]), cE('rail', [c('&:active', [cE('button', 'left: calc(100% - var(--n-offset) - var(--n-button-width-pressed));')])])])])])]), cM('active', [cE('rail', [cE('button', 'left: calc(100% - var(--n-button-width) - var(--n-offset))')])]), cE('rail', `\n overflow: hidden;\n height: var(--n-rail-height);\n min-width: var(--n-rail-width);\n border-radius: var(--n-rail-border-radius);\n cursor: pointer;\n position: relative;\n transition:\n opacity .3s var(--n-bezier),\n background .3s var(--n-bezier),\n box-shadow .3s var(--n-bezier);\n background-color: var(--n-rail-color);\n `, [cE('button-icon', `\n color: var(--n-icon-color);\n transition: color .3s var(--n-bezier);\n font-size: calc(var(--n-button-height) - 4px);\n position: absolute;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n display: flex;\n justify-content: center;\n align-items: center;\n line-height: 1;\n `, [iconSwitchTransition()]), cE('button', `\n align-items: center; \n top: var(--n-offset);\n left: var(--n-offset);\n height: var(--n-button-height);\n width: var(--n-button-width-pressed);\n max-width: var(--n-button-width);\n border-radius: var(--n-button-border-radius);\n background-color: var(--n-button-color);\n box-shadow: var(--n-button-box-shadow);\n box-sizing: border-box;\n cursor: inherit;\n content: \"\";\n position: absolute;\n transition:\n background-color .3s var(--n-bezier),\n left .3s var(--n-bezier),\n opacity .3s var(--n-bezier),\n max-width .3s var(--n-bezier),\n box-shadow .3s var(--n-bezier);\n `)]), cM('active', [cE('rail', 'background-color: var(--n-rail-color-active);')]), cM('loading', [cE('rail', `\n cursor: wait;\n `)]), cM('disabled', [cE('rail', `\n cursor: not-allowed;\n opacity: .5;\n `)])]);","import { h, ref, toRef, defineComponent, computed, watchEffect } from 'vue';\nimport { depx, pxfy } from 'seemly';\nimport { useMergedState } from 'vooks';\nimport { useConfig, useFormItem, useTheme, useThemeClass } from '../../_mixins';\nimport { NBaseLoading, NIconSwitchTransition } from '../../_internal';\nimport { call, createKey, warnOnce, isSlotEmpty, resolveWrappedSlot } from '../../_utils';\nimport { switchLight } from '../styles';\nimport style from './styles/index.cssr';\nexport const switchProps = Object.assign(Object.assign({}, useTheme.props), { size: {\n        type: String,\n        default: 'medium'\n    }, value: {\n        type: [String, Number, Boolean],\n        default: undefined\n    }, loading: Boolean, defaultValue: {\n        type: [String, Number, Boolean],\n        default: false\n    }, disabled: {\n        type: Boolean,\n        default: undefined\n    }, round: {\n        type: Boolean,\n        default: true\n    }, 'onUpdate:value': [Function, Array], onUpdateValue: [Function, Array], checkedValue: {\n        type: [String, Number, Boolean],\n        default: true\n    }, uncheckedValue: {\n        type: [String, Number, Boolean],\n        default: false\n    }, railStyle: Function, rubberBand: {\n        type: Boolean,\n        default: true\n    }, \n    /** @deprecated */\n    onChange: [Function, Array] });\nlet supportCssMax;\nexport default defineComponent({\n    name: 'Switch',\n    props: switchProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.onChange) {\n                    warnOnce('switch', '`on-change` is deprecated, please use `on-update:value` instead.');\n                }\n            });\n        }\n        if (supportCssMax === undefined) {\n            if (typeof CSS !== 'undefined') {\n                if (typeof CSS.supports !== 'undefined') {\n                    supportCssMax = CSS.supports('width', 'max(1px)');\n                }\n                else {\n                    supportCssMax = false;\n                }\n            }\n            else {\n                // If you are using SSR, we assume that you are targeting browsers with\n                // recent versions\n                supportCssMax = true;\n            }\n        }\n        const { mergedClsPrefixRef, inlineThemeDisabled } = useConfig(props);\n        const themeRef = useTheme('Switch', '-switch', style, switchLight, props, mergedClsPrefixRef);\n        const formItem = useFormItem(props);\n        const { mergedSizeRef, mergedDisabledRef } = formItem;\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = toRef(props, 'value');\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const checkedRef = computed(() => {\n            return mergedValueRef.value === props.checkedValue;\n        });\n        const pressedRef = ref(false);\n        const focusedRef = ref(false);\n        const mergedRailStyleRef = computed(() => {\n            const { railStyle } = props;\n            if (!railStyle)\n                return undefined;\n            return railStyle({ focused: focusedRef.value, checked: checkedRef.value });\n        });\n        function doUpdateValue(value) {\n            const { 'onUpdate:value': _onUpdateValue, onChange, onUpdateValue } = props;\n            const { nTriggerFormInput, nTriggerFormChange } = formItem;\n            if (_onUpdateValue)\n                call(_onUpdateValue, value);\n            if (onUpdateValue)\n                call(onUpdateValue, value);\n            if (onChange)\n                call(onChange, value);\n            uncontrolledValueRef.value = value;\n            nTriggerFormInput();\n            nTriggerFormChange();\n        }\n        function doFocus() {\n            const { nTriggerFormFocus } = formItem;\n            nTriggerFormFocus();\n        }\n        function doBlur() {\n            const { nTriggerFormBlur } = formItem;\n            nTriggerFormBlur();\n        }\n        function handleClick() {\n            if (props.loading || mergedDisabledRef.value)\n                return;\n            if (mergedValueRef.value !== props.checkedValue) {\n                doUpdateValue(props.checkedValue);\n            }\n            else {\n                doUpdateValue(props.uncheckedValue);\n            }\n        }\n        function handleFocus() {\n            focusedRef.value = true;\n            doFocus();\n        }\n        function handleBlur() {\n            focusedRef.value = false;\n            doBlur();\n            pressedRef.value = false;\n        }\n        function handleKeyup(e) {\n            if (props.loading || mergedDisabledRef.value)\n                return;\n            if (e.key === ' ') {\n                if (mergedValueRef.value !== props.checkedValue) {\n                    doUpdateValue(props.checkedValue);\n                }\n                else {\n                    doUpdateValue(props.uncheckedValue);\n                }\n                pressedRef.value = false;\n            }\n        }\n        function handleKeydown(e) {\n            if (props.loading || mergedDisabledRef.value)\n                return;\n            if (e.key === ' ') {\n                e.preventDefault();\n                pressedRef.value = true;\n            }\n        }\n        const cssVarsRef = computed(() => {\n            const { value: size } = mergedSizeRef;\n            const { self: { opacityDisabled, railColor, railColorActive, buttonBoxShadow, buttonColor, boxShadowFocus, loadingColor, textColor, iconColor, [createKey('buttonHeight', size)]: buttonHeight, [createKey('buttonWidth', size)]: buttonWidth, [createKey('buttonWidthPressed', size)]: buttonWidthPressed, [createKey('railHeight', size)]: railHeight, [createKey('railWidth', size)]: railWidth, [createKey('railBorderRadius', size)]: railBorderRadius, [createKey('buttonBorderRadius', size)]: buttonBorderRadius }, common: { cubicBezierEaseInOut } } = themeRef.value;\n            let offset;\n            let height;\n            let width;\n            if (supportCssMax) {\n                offset = `calc((${railHeight} - ${buttonHeight}) / 2)`;\n                height = `max(${railHeight}, ${buttonHeight})`;\n                width = `max(${railWidth}, calc(${railWidth} + ${buttonHeight} - ${railHeight}))`;\n            }\n            else {\n                offset = pxfy((depx(railHeight) - depx(buttonHeight)) / 2);\n                height = pxfy(Math.max(depx(railHeight), depx(buttonHeight)));\n                width =\n                    depx(railHeight) > depx(buttonHeight)\n                        ? railWidth\n                        : pxfy(depx(railWidth) + depx(buttonHeight) - depx(railHeight));\n            }\n            return {\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-button-border-radius': buttonBorderRadius,\n                '--n-button-box-shadow': buttonBoxShadow,\n                '--n-button-color': buttonColor,\n                '--n-button-width': buttonWidth,\n                '--n-button-width-pressed': buttonWidthPressed,\n                '--n-button-height': buttonHeight,\n                '--n-height': height,\n                '--n-offset': offset,\n                '--n-opacity-disabled': opacityDisabled,\n                '--n-rail-border-radius': railBorderRadius,\n                '--n-rail-color': railColor,\n                '--n-rail-color-active': railColorActive,\n                '--n-rail-height': railHeight,\n                '--n-rail-width': railWidth,\n                '--n-width': width,\n                '--n-box-shadow-focus': boxShadowFocus,\n                '--n-loading-color': loadingColor,\n                '--n-text-color': textColor,\n                '--n-icon-color': iconColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('switch', computed(() => {\n                return mergedSizeRef.value[0];\n            }), cssVarsRef, props)\n            : undefined;\n        return {\n            handleClick,\n            handleBlur,\n            handleFocus,\n            handleKeyup,\n            handleKeydown,\n            mergedRailStyle: mergedRailStyleRef,\n            pressed: pressedRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedValue: mergedValueRef,\n            checked: checkedRef,\n            mergedDisabled: mergedDisabledRef,\n            cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n            themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n            onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n        };\n    },\n    render() {\n        const { mergedClsPrefix, mergedDisabled, checked, mergedRailStyle, onRender, $slots } = this;\n        onRender === null || onRender === void 0 ? void 0 : onRender();\n        const { checked: checkedSlot, unchecked: uncheckedSlot, icon: iconSlot, 'checked-icon': checkedIconSlot, 'unchecked-icon': uncheckedIconSlot } = $slots;\n        const hasIcon = !(isSlotEmpty(iconSlot) &&\n            isSlotEmpty(checkedIconSlot) &&\n            isSlotEmpty(uncheckedIconSlot));\n        return (h(\"div\", { role: \"switch\", \"aria-checked\": checked, class: [\n                `${mergedClsPrefix}-switch`,\n                this.themeClass,\n                hasIcon && `${mergedClsPrefix}-switch--icon`,\n                checked && `${mergedClsPrefix}-switch--active`,\n                mergedDisabled && `${mergedClsPrefix}-switch--disabled`,\n                this.round && `${mergedClsPrefix}-switch--round`,\n                this.loading && `${mergedClsPrefix}-switch--loading`,\n                this.pressed && `${mergedClsPrefix}-switch--pressed`,\n                this.rubberBand && `${mergedClsPrefix}-switch--rubber-band`\n            ], tabindex: !this.mergedDisabled ? 0 : undefined, style: this.cssVars, onClick: this.handleClick, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyup: this.handleKeyup, onKeydown: this.handleKeydown },\n            h(\"div\", { class: `${mergedClsPrefix}-switch__rail`, \"aria-hidden\": \"true\", style: mergedRailStyle },\n                resolveWrappedSlot(checkedSlot, (checkedSlotChildren) => resolveWrappedSlot(uncheckedSlot, (uncheckedSlotChildren) => {\n                    if (checkedSlotChildren || uncheckedSlotChildren) {\n                        return (h(\"div\", { \"aria-hidden\": true, class: `${mergedClsPrefix}-switch__children-placeholder` },\n                            h(\"div\", { class: `${mergedClsPrefix}-switch__rail-placeholder` },\n                                h(\"div\", { class: `${mergedClsPrefix}-switch__button-placeholder` }),\n                                checkedSlotChildren),\n                            h(\"div\", { class: `${mergedClsPrefix}-switch__rail-placeholder` },\n                                h(\"div\", { class: `${mergedClsPrefix}-switch__button-placeholder` }),\n                                uncheckedSlotChildren)));\n                    }\n                    return null;\n                })),\n                h(\"div\", { class: `${mergedClsPrefix}-switch__button` },\n                    resolveWrappedSlot(iconSlot, (icon) => resolveWrappedSlot(checkedIconSlot, (checkedIcon) => resolveWrappedSlot(uncheckedIconSlot, (uncheckedIcon) => {\n                        return (h(NIconSwitchTransition, null, {\n                            default: () => this.loading ? (h(NBaseLoading, { key: \"loading\", clsPrefix: mergedClsPrefix, strokeWidth: 20 })) : this.checked && (checkedIcon || icon) ? (h(\"div\", { class: `${mergedClsPrefix}-switch__button-icon`, key: checkedIcon ? 'checked-icon' : 'icon' }, checkedIcon || icon)) : !this.checked && (uncheckedIcon || icon) ? (h(\"div\", { class: `${mergedClsPrefix}-switch__button-icon`, key: uncheckedIcon ? 'unchecked-icon' : 'icon' }, uncheckedIcon || icon)) : null\n                        }));\n                    }))),\n                    resolveWrappedSlot(checkedSlot, (children) => children && (h(\"div\", { key: \"checked\", class: `${mergedClsPrefix}-switch__checked` }, children))),\n                    resolveWrappedSlot(uncheckedSlot, (children) => children && (h(\"div\", { key: \"unchecked\", class: `${mergedClsPrefix}-switch__unchecked` }, children)))))));\n    }\n});\n","import {\n  NCollapseItem,\n  NForm,\n  NFormItem,\n  NGi,\n  NGrid,\n  NInput,\n  NInputNumber\n} from 'naive-ui'\n\nimport { Primitive } from '@/primitives/primitive'\nimport { useEditorStore } from '@/store/editor'\n\nexport default defineComponent({\n  name: 'ChartGrid',\n  setup() {\n    const formValue = ref({\n      show: true,\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    })\n\n    const editorStore = useEditorStore()\n    const { curPrimitive } = storeToRefs(editorStore)\n\n    watch(\n      formValue,\n      (val) => {\n        console.log('val', val)\n        const primitive = curPrimitive.value as Primitive\n        const options = Object.assign(primitive.chartOptions.grid || {}, val)\n        console.log('options', options)\n\n        primitive.chartOptions.grid = options\n      },\n      { deep: true }\n    )\n\n    return {\n      formValue\n    }\n  },\n  render() {\n    const { formValue } = this\n\n    return (\n      <NCollapseItem\n        title='网格'\n        name='grid'\n        v-slots={{\n          default: () => (\n            <NForm size='small' labelPlacement='top' labelAlign='left'>\n              <NFormItem label=' 距离'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NInput\n                      v-model:value={formValue.left}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '左侧'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.right}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '右侧'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInput\n                      v-model:value={formValue.top}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '上侧'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInput\n                      v-model:value={formValue.bottom}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '下侧'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n            </NForm>\n          )\n        }}\n      ></NCollapseItem>\n    )\n  }\n})\n","import {\n  NCollapseItem,\n  NColorPicker,\n  NForm,\n  NFormItem,\n  NGi,\n  NGrid,\n  NInput,\n  NInputNumber,\n  NSelect,\n  NSwitch\n} from 'naive-ui'\n\nimport { Primitive } from '@/primitives/primitive'\nimport { useEditorStore } from '@/store/editor'\n\nexport default defineComponent({\n  name: 'ChartXAxis',\n  setup() {\n    const formValue = ref({\n      name: '',\n      nameTextStyle: {\n        color: '#FFFFFF',\n        fontSize: 12,\n        borderDashOffset: 0\n      },\n      axisLabel: {\n        show: true,\n        color: '#FFFFFF',\n        fontSize: 12,\n        borderDashOffset: 0\n      },\n      position: 'bottom',\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#FFFFFF',\n          width: 1\n        }\n      },\n      axisTick: {\n        show: true,\n        length: 3\n      },\n      splitLine: {\n        show: false,\n        lineStyle: {\n          color: '#FFFFFF',\n          width: 1,\n          type: 'solid'\n        }\n      }\n    })\n\n    const editorStore = useEditorStore()\n    const { curPrimitive } = storeToRefs(editorStore)\n\n    const splitLineTypeOptions = [\n      {\n        label: '实线',\n        value: 'solid'\n      },\n      {\n        label: '虚线',\n        value: 'dashed'\n      },\n      {\n        label: '圆点',\n        value: 'dotted'\n      }\n    ]\n\n    const axisPositionOptions = [\n      {\n        label: '顶部',\n        value: 'top'\n      },\n      {\n        label: '底部',\n        value: 'bottom'\n      }\n    ]\n\n    watch(\n      formValue,\n      (val) => {\n        const primitive = curPrimitive.value as Primitive\n        const options = Object.assign(primitive.chartOptions.xAxis, val)\n        primitive.chartOptions.xAxis = options\n      },\n      { deep: true }\n    )\n\n    return {\n      formValue,\n      axisPositionOptions,\n      splitLineTypeOptions\n    }\n  },\n  render() {\n    const { formValue, splitLineTypeOptions } = this\n\n    return (\n      <NCollapseItem\n        title='X轴'\n        name='xAxis'\n        v-slots={{\n          default: () => (\n            <NForm size='small' labelPlacement='top' labelAlign='left'>\n              <NFormItem label='单位'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NInput\n                      v-model:value={formValue.name}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '名称'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NColorPicker\n                      v-model:value={formValue.nameTextStyle.color}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.nameTextStyle.fontSize}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '大小'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.nameTextStyle.borderDashOffset}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '偏移量'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='标签'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.axisLabel.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NColorPicker v-model:value={formValue.axisLabel.color} />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisLabel.fontSize}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '大小'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisLabel.borderDashOffset}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入偏移量'\n                      v-slots={{\n                        prefix: () => '偏移量'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='轴线'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.axisLine.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NColorPicker\n                      v-model:value={formValue.axisLine.lineStyle.color}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisLine.lineStyle.width}\n                      max={10}\n                      min={1}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '粗细'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NSelect\n                      v-model:value={formValue.position}\n                      placeholder='Select'\n                      options={this.axisPositionOptions}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='刻度'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.axisTick.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisTick.length}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '长度'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='分割线'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.splitLine.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NColorPicker\n                      v-model:value={formValue.splitLine.lineStyle.color}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.splitLine.lineStyle.width}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '粗细'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NSelect\n                      v-model:value={formValue.splitLine.lineStyle.type}\n                      placeholder='Select'\n                      options={splitLineTypeOptions}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n            </NForm>\n          )\n        }}\n      ></NCollapseItem>\n    )\n  }\n})\n","import {\n  NCollapseItem,\n  NColorPicker,\n  NForm,\n  NFormItem,\n  NGi,\n  NGrid,\n  NInput,\n  NInputNumber,\n  NSelect,\n  NSwitch\n} from 'naive-ui'\n\nimport { Primitive } from '@/primitives/primitive'\nimport { useEditorStore } from '@/store/editor'\n\nexport default defineComponent({\n  name: 'ChartYAxis',\n  setup() {\n    const formValue = ref({\n      name: '',\n      nameTextStyle: {\n        color: '#FFFFFF',\n        fontSize: 12,\n        borderDashOffset: 0\n      },\n      axisLabel: {\n        show: true,\n        color: '#FFFFFF',\n        fontSize: 12,\n        borderDashOffset: 0\n      },\n      position: 'bottom',\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#FFFFFF',\n          width: 1\n        }\n      },\n      axisTick: {\n        show: true,\n        length: 3\n      },\n      splitLine: {\n        show: false,\n        lineStyle: {\n          color: '#FFFFFF',\n          width: 1,\n          type: 'solid'\n        }\n      }\n    })\n\n    const editorStore = useEditorStore()\n    const { curPrimitive } = storeToRefs(editorStore)\n\n    const splitLineTypeOptions = [\n      {\n        label: '实线',\n        value: 'solid'\n      },\n      {\n        label: '虚线',\n        value: 'dashed'\n      },\n      {\n        label: '圆点',\n        value: 'dotted'\n      }\n    ]\n\n    const axisPositionOptions = [\n      {\n        label: '顶部',\n        value: 'top'\n      },\n      {\n        label: '底部',\n        value: 'bottom'\n      }\n    ]\n\n    watch(\n      formValue,\n      (val) => {\n        const primitive = curPrimitive.value as Primitive\n        const options = Object.assign(primitive.chartOptions.yAxis, val)\n        primitive.chartOptions.yAxis = options\n      },\n      { deep: true }\n    )\n\n    return {\n      formValue,\n      axisPositionOptions,\n      splitLineTypeOptions\n    }\n  },\n  render() {\n    const { formValue, splitLineTypeOptions } = this\n\n    return (\n      <NCollapseItem\n        title='Y轴'\n        name='yAxis'\n        v-slots={{\n          default: () => (\n            <NForm size='small' labelPlacement='top' labelAlign='left'>\n              <NFormItem label='单位'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NInput\n                      v-model:value={formValue.name}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '名称'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NColorPicker\n                      v-model:value={formValue.nameTextStyle.color}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.nameTextStyle.fontSize}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '大小'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.nameTextStyle.borderDashOffset}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '偏移量'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='标签'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.axisLabel.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NColorPicker v-model:value={formValue.axisLabel.color} />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisLabel.fontSize}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '大小'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisLabel.borderDashOffset}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入偏移量'\n                      v-slots={{\n                        prefix: () => '偏移量'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='轴线'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.axisLine.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NColorPicker\n                      v-model:value={formValue.axisLine.lineStyle.color}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisLine.lineStyle.width}\n                      max={10}\n                      min={1}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '粗细'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NSelect\n                      v-model:value={formValue.position}\n                      placeholder='Select'\n                      options={this.axisPositionOptions}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='刻度'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.axisTick.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.axisTick.length}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '长度'\n                      }}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n              <NFormItem label='分割线'>\n                <NGrid xGap={12} cols={2}>\n                  <NGi>\n                    <NSwitch\n                      v-model:value={formValue.splitLine.show}\n                      round={false}\n                      v-slots={{\n                        checked: () => '显示',\n                        unchecked: () => '隐藏'\n                      }}\n                    ></NSwitch>\n                  </NGi>\n                  <NGi>\n                    <NColorPicker\n                      v-model:value={formValue.splitLine.lineStyle.color}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NInputNumber\n                      v-model:value={formValue.splitLine.lineStyle.width}\n                      max={999}\n                      min={0}\n                      showButton={false}\n                      precision={0}\n                      clearable={true}\n                      placeholder='请输入'\n                      v-slots={{\n                        prefix: () => '粗细'\n                      }}\n                    />\n                  </NGi>\n                  <NGi>\n                    <NSelect\n                      v-model:value={formValue.splitLine.lineStyle.type}\n                      placeholder='Select'\n                      options={splitLineTypeOptions}\n                    />\n                  </NGi>\n                </NGrid>\n              </NFormItem>\n            </NForm>\n          )\n        }}\n      ></NCollapseItem>\n    )\n  }\n})\n","import BaseAttrs from '@/primitives/attrs/base'\n\nimport { ChartGrid, ChartXAxis, ChartYAxis } from '../../../attrs/index'\n\nexport default defineComponent({\n  name: 'BarChartAttrs',\n  setup() {\n    return () => (\n      <BaseAttrs\n        v-slots={{\n          default: () => (\n            <>\n              <ChartGrid />\n              <ChartXAxis />\n              <ChartYAxis />\n            </>\n          )\n        }}\n      />\n    )\n  }\n})\n"],"names":["switchLight$1","name","common","commonLight","self","vars","primaryColor","opacityDisabled","borderRadius","textColor3","Object","assign","commonVars","iconColor","textColor","loadingColor","railColor","railColorActive","buttonBoxShadow","buttonColor","railBorderRadiusSmall","railBorderRadiusMedium","railBorderRadiusLarge","buttonBorderRadiusSmall","buttonBorderRadiusMedium","buttonBorderRadiusLarge","boxShadowFocus","changeColor","alpha","style","cB","cE","iconSwitchTransition","left","top","originalTransform","c","cM","cNotM","supportCssMax","NSwitch","defineComponent","props","useTheme","size","type","String","default","value","Number","Boolean","loading","defaultValue","disabled","round","Function","Array","onUpdateValue","checkedValue","uncheckedValue","railStyle","rubberBand","onChange","setup","watchEffect","warnOnce","CSS","supports","mergedClsPrefixRef","inlineThemeDisabled","useConfig","themeRef","switchLight","formItem","useFormItem","mergedSizeRef","mergedDisabledRef","uncontrolledValueRef","ref","controlledValueRef","toRef","mergedValueRef","useMergedState","checkedRef","computed","pressedRef","focusedRef","mergedRailStyleRef","focused","checked","doUpdateValue","_onUpdateValue","nTriggerFormInput","nTriggerFormChange","call","cssVarsRef","createKey","buttonHeight","buttonWidth","buttonWidthPressed","railHeight","railWidth","railBorderRadius","buttonBorderRadius","cubicBezierEaseInOut","offset","height","width","pxfy","depx","Math","max","themeClassHandle","useThemeClass","handleClick","handleBlur","nTriggerFormBlur","handleFocus","nTriggerFormFocus","handleKeyup","e","key","handleKeydown","preventDefault","mergedRailStyle","pressed","mergedClsPrefix","mergedValue","mergedDisabled","cssVars","themeClass","onRender","render","$slots","this","checkedSlot","unchecked","uncheckedSlot","icon","iconSlot","checkedIconSlot","uncheckedIconSlot","hasIcon","isSlotEmpty","h","role","class","tabindex","onClick","onFocus","onBlur","onKeyup","onKeydown","resolveWrappedSlot","checkedSlotChildren","uncheckedSlotChildren","checkedIcon","uncheckedIcon","NIconSwitchTransition","NBaseLoading","clsPrefix","strokeWidth","children","ChartGrid","show","right","bottom","editorStore","useEditorStore","curPrimitive","storeToRefs","watch","primitive","options","chartOptions","grid","val","deep","formValue","title","labelPlacement","labelAlign","label","xGap","$event","clearable","placeholder","ChartXAxis","nameTextStyle","color","fontSize","borderDashOffset","axisLabel","position","axisLine","lineStyle","axisTick","length","splitLine","xAxis","splitLineTypeOptions","min","showButton","precision","axisPositionOptions","ChartYAxis","yAxis","attrs","_createVNode","BaseAttrs"],"mappings":"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","x_google_ignoreList":[0,1,2]}