{"version":3,"file":"GridItem-CR1WTjzB.js","sources":["../../../node_modules/naive-ui/es/_utils/vue/get-slot.mjs","../../../node_modules/naive-ui/es/_internal/icons/Add.mjs","../../../node_modules/naive-ui/es/grid/src/config.mjs","../../../node_modules/naive-ui/es/grid/src/GridItem.mjs"],"sourcesContent":["export function getSlot(instance, slotName = 'default', fallback = []) {\n  const slots = instance.$slots;\n  const slot = slots[slotName];\n  if (slot === undefined) return fallback;\n  return slot();\n}","import { h, defineComponent } from 'vue';\nexport default defineComponent({\n  name: 'Add',\n  render() {\n    return h(\"svg\", {\n      width: \"512\",\n      height: \"512\",\n      viewBox: \"0 0 512 512\",\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\"\n    }, h(\"path\", {\n      d: \"M256 112V400M400 256H112\",\n      stroke: \"currentColor\",\n      \"stroke-width\": \"32\",\n      \"stroke-linecap\": \"round\",\n      \"stroke-linejoin\": \"round\"\n    }));\n  }\n});","import { createInjectionKey } from \"../../_utils/index.mjs\";\nexport const defaultSpan = 1;\nexport const gridInjectionKey = createInjectionKey('n-grid');","import { h, defineComponent, inject, getCurrentInstance, computed } from 'vue';\nimport { pxfy } from 'seemly';\nimport { keysOf } from \"../../_utils/index.mjs\";\nimport { gridInjectionKey } from \"./config.mjs\";\nexport const defaultSpan = 1;\nexport const gridItemProps = {\n  span: {\n    type: [Number, String],\n    default: defaultSpan\n  },\n  offset: {\n    type: [Number, String],\n    default: 0\n  },\n  suffix: Boolean,\n  // private props\n  privateOffset: Number,\n  privateSpan: Number,\n  privateColStart: Number,\n  privateShow: {\n    type: Boolean,\n    default: true\n  }\n};\nexport const gridItemPropKeys = keysOf(gridItemProps);\nexport default defineComponent({\n  __GRID_ITEM__: true,\n  name: 'GridItem',\n  alias: ['Gi'],\n  props: gridItemProps,\n  setup() {\n    const {\n      isSsrRef,\n      xGapRef,\n      itemStyleRef,\n      overflowRef,\n      layoutShiftDisabledRef\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    } = inject(gridInjectionKey);\n    const self = getCurrentInstance();\n    return {\n      overflow: overflowRef,\n      itemStyle: itemStyleRef,\n      layoutShiftDisabled: layoutShiftDisabledRef,\n      mergedXGap: computed(() => {\n        return pxfy(xGapRef.value || 0);\n      }),\n      deriveStyle: () => {\n        void isSsrRef.value;\n        // Here is quite a hack, I hope there is a better way to solve it\n        const {\n          privateSpan = defaultSpan,\n          privateShow = true,\n          privateColStart = undefined,\n          privateOffset = 0\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        } = self.vnode.props;\n        const {\n          value: xGap\n        } = xGapRef;\n        const mergedXGap = pxfy(xGap || 0);\n        return {\n          display: !privateShow ? 'none' : '',\n          gridColumn: `${privateColStart !== null && privateColStart !== void 0 ? privateColStart : `span ${privateSpan}`} / span ${privateSpan}`,\n          marginLeft: privateOffset ? `calc((100% - (${privateSpan} - 1) * ${mergedXGap}) / ${privateSpan} * ${privateOffset} + ${mergedXGap} * ${privateOffset})` : ''\n        };\n      }\n    };\n  },\n  render() {\n    var _a, _b;\n    if (this.layoutShiftDisabled) {\n      const {\n        span,\n        offset,\n        mergedXGap\n      } = this;\n      return h(\"div\", {\n        style: {\n          gridColumn: `span ${span} / span ${span}`,\n          marginLeft: offset ? `calc((100% - (${span} - 1) * ${mergedXGap}) / ${span} * ${offset} + ${mergedXGap} * ${offset})` : ''\n        }\n      }, this.$slots);\n    }\n    return h(\"div\", {\n      style: [this.itemStyle, this.deriveStyle()]\n    }, (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, {\n      overflow: this.overflow\n    }));\n  }\n});"],"names":["getSlot","instance","slotName","fallback","slot","$slots","AddIcon","defineComponent","name","render","h","width","height","viewBox","fill","xmlns","d","stroke","defaultSpan","gridInjectionKey","createInjectionKey","__unplugin_components_9","__GRID_ITEM__","alias","props","span","type","Number","String","default","offset","suffix","Boolean","privateOffset","privateSpan","privateColStart","privateShow","setup","isSsrRef","xGapRef","itemStyleRef","overflowRef","layoutShiftDisabledRef","inject","self","getCurrentInstance","overflow","itemStyle","layoutShiftDisabled","mergedXGap","computed","pxfy","value","deriveStyle","vnode","xGap","display","gridColumn","marginLeft","_a","_b","this","style","call"],"mappings":"oHAAO,SAASA,EAAQC,EAAUC,EAAW,UAAWC,EAAW,IACjE,MACMC,EADQH,EAASI,OACJH,GACnB,YAAa,IAATE,EAA2BD,EACxBC,GACT,CCJA,MAAAE,EAAeC,EAAgB,CAC7BC,KAAM,MACNC,OAAS,IACAC,EAAE,MAAO,CACdC,MAAO,MACPC,OAAQ,MACRC,QAAS,cACTC,KAAM,OACNC,MAAO,8BACNL,EAAE,OAAQ,CACXM,EAAG,2BACHC,OAAQ,eACR,eAAgB,KAChB,iBAAkB,QAClB,kBAAmB,aCdZC,EAAc,EACdC,EAAmBC,EAAmB,UCEtCF,EAAc,EAqB3BG,EAAed,EAAgB,CAC7Be,eAAe,EACfd,KAAM,WACNe,MAAO,CAAC,MACRC,MAxB2B,CAC3BC,KAAM,CACJC,KAAM,CAACC,OAAQC,QACfC,QAASX,GAEXY,OAAQ,CACNJ,KAAM,CAACC,OAAQC,QACfC,QAAS,GAEXE,OAAQC,QAERC,cAAeN,OACfO,YAAaP,OACbQ,gBAAiBR,OACjBS,YAAa,CACXV,KAAMM,QACNH,SAAS,IASX,KAAAQ,GACQ,MAAAC,SACJA,EAAAC,QACAA,EAAAC,aACAA,EAAAC,YACAA,EAAAC,uBACAA,GAEEC,EAAOxB,GACLyB,EAAOC,IACN,MAAA,CACLC,SAAUL,EACVM,UAAWP,EACXQ,oBAAqBN,EACrBO,WAAYC,GAAS,IACZC,EAAKZ,EAAQa,OAAS,KAE/BC,YAAa,KACNf,EAASc,MAER,MAAAlB,YACJA,EAAchB,EAAAkB,YACdA,GAAc,EAAAD,gBACdA,EAAkBF,cAClBA,EAAgB,GAEdW,EAAKU,MAAM9B,OAEb4B,MAAOG,GACLhB,EACEU,EAAaE,EAAKI,GAAQ,GACzB,MAAA,CACLC,QAAUpB,EAAuB,GAAT,OACxBqB,WAAY,GAAGtB,QAAyDA,EAAkB,QAAQD,cAAwBA,IAC1HwB,WAAYzB,EAAgB,iBAAiBC,YAAsBe,QAAiBf,OAAiBD,OAAmBgB,OAAgBhB,KAAmB,GACrK,EAGG,EACD,MAAAxB,GACE,IAAIkD,EAAIC,EACR,GAAIC,KAAKb,oBAAqB,CACtB,MAAAvB,KACJA,EAAAK,OACAA,EAAAmB,WACAA,GACEY,KACJ,OAAOnD,EAAE,MAAO,CACdoD,MAAO,CACLL,WAAY,QAAQhC,YAAeA,IACnCiC,WAAY5B,EAAS,iBAAiBL,YAAewB,QAAiBxB,OAAUK,OAAYmB,OAAgBnB,KAAY,KAEzH+B,KAAKxD,OACT,CACD,OAAOK,EAAE,MAAO,CACdoD,MAAO,CAACD,KAAKd,UAAWc,KAAKR,gBACU,QAArCO,GAAMD,EAAKE,KAAKxD,QAAQwB,eAA4B,IAAP+B,OAAgB,EAASA,EAAGG,KAAKJ,EAAI,CACpFb,SAAUe,KAAKf,WAElB","x_google_ignoreList":[0,1,2,3]}